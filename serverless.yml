service: backend

provider:
  name: aws
  runtime: nodejs18.x
  environment:
    MONGO_URI: ${env:MONGO_URI}
    JWT_SECRET: ${env:JWT_SECRET}
    JWT_EXPIRES_IN: ${env:JWT_EXPIRES_IN}

functions:
  # Public APIs
  signup:
    handler: handler.signupHandler
    events:
      - http:
          path: signup
          method: post

  login:
    handler: handler.loginHandler
    events:
      - http:
          path: login
          method: post

  logout:
    handler: handler.logoutHandler
    events:
      - http:
          path: logout
          method: post
  validateInvite:
    handler: handler.validateInviteHandler
    events:
      - http:
          path: invites/{token}/validate
          method: get
          cors: true

  # Protected APIs

  # Board APIs
  createBoard:
    handler: handler.createBoardHandler
    events:
      - http:
          path: boards
          method: post
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
            identitySource: method.request.header.Cookie

  getBoards:
    handler: handler.getBoardsHandler
    events:
      - http:
          path: boards
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
            identitySource: method.request.header.Cookie

  getBoardById:
    handler: handler.getBoardByIdHandler
    events:
      - http:
          path: boards/{id}
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
            identitySource: method.request.header.Cookie

  updateBoard:
    handler: handler.updateBoardHandler
    events:
      - http:
          path: boards/{id}
          method: put
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
            identitySource: method.request.header.Cookie

  deleteBoard:
    handler: handler.deleteBoardHandler
    events:
      - http:
          path: boards/{id}
          method: delete
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
            identitySource: method.request.header.Cookie

  # Invite APIs
  createInvite:
    handler: handler.createInviteHandler
    events:
      - http:
          path: boards/{boardId}/invites
          method: post
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 3600
            identitySource: method.request.header.Cookie

  getBoardInvites:
    handler: handler.getBoardInvitesHandler
    events:
      - http:
          path: boards/{boardId}/invites
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
            identitySource: method.request.header.Cookie

  acceptInvite:
    handler: handler.acceptInviteHandler
    events:
      - http:
          path: invites/{token}/accept
          method: post
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
            identitySource: method.request.header.Cookie

  deleteInvite:
    handler: handler.deleteInviteHandler
    events:
      - http:
          path: boards/{boardId}/invites/{inviteId}
          method: delete
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
            identitySource: method.request.header.Cookie

 

  # List APIs
  createList:
    handler: handler.createListHandler
    events:
      - http:
          path: boards/{boardId}/lists
          method: post
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
            identitySource: method.request.header.Cookie

  getLists:
    handler: handler.getListsHandler
    events:
      - http:
          path: boards/{boardId}/lists
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
            identitySource: method.request.header.Cookie

  getListById:
    handler: handler.getListByIdHandler
    events:
      - http:
          path: lists/{id}
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
            identitySource: method.request.header.Cookie

  updateList:
    handler: handler.updateListHandler
    events:
      - http:
          path: lists/{id}
          method: put
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
            identitySource: method.request.header.Cookie

  deleteList:
    handler: handler.deleteListHandler
    events:
      - http:
          path: lists/{id}
          method: delete
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
            identitySource: method.request.header.Cookie

  updateListOrder:
    handler: handler.updateListOrderHandler
    events:
      - http:
          path: boards/{boardId}/lists/order
          method: put
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
            identitySource: method.request.header.Cookie

  # Card APIs
  createCard:
    handler: handler.createCardHandler
    events:
      - http:
          path: lists/{listId}/cards
          method: post
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
            identitySource: method.request.header.Cookie

  getCards:
    handler: handler.getCardsHandler
    events:
      - http:
          path: lists/{listId}/cards
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
            identitySource: method.request.header.Cookie

  getCardById:
    handler: handler.getCardByIdHandler
    events:
      - http:
          path: cards/{id}
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
            identitySource: method.request.header.Cookie

  updateCard:
    handler: handler.updateCardHandler
    events:
      - http:
          path: cards/{id}
          method: put
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
            identitySource: method.request.header.Cookie

  deleteCard:
    handler: handler.deleteCardHandler
    events:
      - http:
          path: cards/{id}
          method: delete
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
            identitySource: method.request.header.Cookie

  # Authorization function to validate JWT
  authorize:
    handler: handler.authorize

plugins:
  - serverless-offline
